Index: utils/TableGen/ClangDiagnosticsEmitter.cpp
===================================================================
--- llvm/tools/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp	(revision 166691)
+++ llvm/tools/clang/utils/TableGen/ClangDiagnosticsEmitter.cpp	(revision 166690)
@@ -18,7 +18,6 @@
 #include "llvm/ADT/Optional.h"
 #include "llvm/Support/Compiler.h"
 #include "llvm/Support/Debug.h"
-#include "llvm/TableGen/Error.h"
 #include "llvm/TableGen/Record.h"
 #include "llvm/TableGen/TableGenBackend.h"
 #include <algorithm>
@@ -395,8 +394,8 @@
       if (DefInit *Group = dyn_cast<DefInit>(R.getValueInit("Group"))) {
         const Record *GroupRec = Group->getDef();
         const std::string &GroupName = GroupRec->getValueAsString("GroupName");
-        PrintFatalError(R.getLoc(), "Error " + R.getName() +
-                      " cannot be in a warning group [" + GroupName + "]");
+        throw "Error " + R.getName() + " cannot be in a warning group [" +
+              GroupName + "]";
       }
     }
 
@@ -557,8 +556,7 @@
     if (I->first.find_first_not_of("abcdefghijklmnopqrstuvwxyz"
                                    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                    "0123456789!@#$%^*-+=:?")!=std::string::npos)
-      PrintFatalError("Invalid character in diagnostic group '" +
-                      I->first + "'");
+      throw "Invalid character in diagnostic group '" + I->first + "'";
     OS.write_escaped(I->first) << "\","
                                << std::string(MaxLen-I->first.size()+1, ' ');
 
Index: utils/TableGen/NeonEmitter.cpp
===================================================================
--- llvm/tools/clang/utils/TableGen/NeonEmitter.cpp	(revision 166691)
+++ llvm/tools/clang/utils/TableGen/NeonEmitter.cpp	(revision 166690)
@@ -245,7 +245,7 @@
       case 'f':
         break;
       default:
-        PrintFatalError(r->getLoc(),
+        throw TGError(r->getLoc(),
                       "Unexpected letter: " + std::string(data + len, 1));
     }
     TV.push_back(StringRef(data, len + 1));
@@ -266,8 +266,7 @@
       return 'l';
     case 'h':
       return 'f';
-    default:
-      PrintFatalError("unhandled type in widen!");
+    default: throw "unhandled type in widen!";
   }
 }
 
@@ -283,8 +282,7 @@
       return 'i';
     case 'f':
       return 'h';
-    default:
-      PrintFatalError("unhandled type in narrow!");
+    default: throw "unhandled type in narrow!";
   }
 }
 
@@ -455,7 +453,7 @@
       s += quad ? "x4" : "x2";
       break;
     default:
-      PrintFatalError("unhandled type!");
+      throw "unhandled type!";
   }
 
   if (mod == '2')
@@ -637,7 +635,7 @@
     }
     break;
   default:
-    PrintFatalError("unhandled type!");
+    throw "unhandled type!";
   }
   if (ck == ClassB)
     s += "_v";
@@ -775,7 +773,7 @@
   case 'h': nElts = 4; break;
   case 'f': nElts = 2; break;
   default:
-    PrintFatalError("unhandled type!");
+    throw "unhandled type!";
   }
   if (quad) nElts <<= 1;
   return nElts;
@@ -1006,7 +1004,7 @@
     break;
   }
   default:
-    PrintFatalError("unknown OpKind!");
+    throw "unknown OpKind!";
   }
   return s;
 }
@@ -1051,7 +1049,7 @@
       ET = NeonTypeFlags::Float32;
       break;
     default:
-      PrintFatalError("unhandled type!");
+      throw "unhandled type!";
   }
   NeonTypeFlags Flags(ET, usgn, quad && proto[1] != 'g');
   return Flags.getFlags();
@@ -1383,7 +1381,7 @@
   if (R->getSuperClasses().size() >= 2)
     classKind = ClassMap[R->getSuperClasses()[1]];
   if (classKind == ClassNone && kind == OpNone)
-    PrintFatalError(R->getLoc(), "Builtin has no class kind");
+    throw TGError(R->getLoc(), "Builtin has no class kind");
 
   for (unsigned ti = 0, te = TypeVec.size(); ti != te; ++ti) {
     if (kind == OpReinterpret) {
@@ -1425,7 +1423,7 @@
     case 'l':
       return (1 << (int)quad) - 1;
     default:
-      PrintFatalError("unhandled type!");
+      throw "unhandled type!";
   }
 }
 
@@ -1458,7 +1456,7 @@
     ParseTypes(R, Types, TypeVec);
 
     if (R->getSuperClasses().size() < 2)
-      PrintFatalError(R->getLoc(), "Builtin has no class kind");
+      throw TGError(R->getLoc(), "Builtin has no class kind");
 
     std::string name = R->getValueAsString("Name");
     ClassKind ck = ClassMap[R->getSuperClasses()[1]];
@@ -1503,7 +1501,7 @@
     ParseTypes(R, Types, TypeVec);
 
     if (R->getSuperClasses().size() < 2)
-      PrintFatalError(R->getLoc(), "Builtin has no class kind");
+      throw TGError(R->getLoc(), "Builtin has no class kind");
 
     int si = -1, qi = -1;
     uint64_t mask = 0, qmask = 0;
@@ -1602,7 +1600,7 @@
     ParseTypes(R, Types, TypeVec);
 
     if (R->getSuperClasses().size() < 2)
-      PrintFatalError(R->getLoc(), "Builtin has no class kind");
+      throw TGError(R->getLoc(), "Builtin has no class kind");
 
     ClassKind ck = ClassMap[R->getSuperClasses()[1]];
 
Index: utils/TableGen/OptParserEmitter.cpp
===================================================================
--- llvm/tools/clang/utils/TableGen/OptParserEmitter.cpp	(revision 166691)
+++ llvm/tools/clang/utils/TableGen/OptParserEmitter.cpp	(revision 166690)
@@ -77,7 +77,7 @@
       B->getValueAsListOfStrings("Prefixes")) {
     PrintError(A->getLoc(), Twine("Option is equivilent to"));
     PrintError(B->getLoc(), Twine("Other defined here"));
-    PrintFatalError("Equivalent Options found.");
+    throw "Eqivilant Options found.";
   }
   return APrec < BPrec ? -1 : 1;
 }
Index: utils/TableGen/ClangSACheckersEmitter.cpp
===================================================================
--- llvm/tools/clang/utils/TableGen/ClangSACheckersEmitter.cpp	(revision 166691)
+++ llvm/tools/clang/utils/TableGen/ClangSACheckersEmitter.cpp	(revision 166690)
@@ -12,7 +12,6 @@
 //===----------------------------------------------------------------------===//
 
 #include "llvm/ADT/DenseSet.h"
-#include "llvm/TableGen/Error.h"
 #include "llvm/TableGen/Record.h"
 #include "llvm/TableGen/TableGenBackend.h"
 #include <map>
@@ -134,8 +133,7 @@
           DI = dyn_cast<DefInit>(R->getValueInit("ParentPackage")))
       package = DI->getDef();
     if (!isCheckerNamed(R) && !package)
-      PrintFatalError(R->getLoc(), "Checker '" + R->getName() +
-                      "' is neither named, nor in a package!");
+      throw "Checker '" + R->getName() + "' is neither named, nor in a package!";
 
     if (isCheckerNamed(R)) {
       // Create a pseudo-group to hold this checker.

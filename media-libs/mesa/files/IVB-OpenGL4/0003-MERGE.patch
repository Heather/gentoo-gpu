From 281ca9b3c9e06f5486a8d60c82e936ae5214d165 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Samuel=20Iglesias=20Gons=C3=A1lvez?= <siglesias@igalia.com>
Date: Tue, 10 Jan 2017 08:03:06 +0100
Subject: [PATCH 03/32] MERGE:
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

v2:
- Use static inline function instead of fs_inst's method (Curro).
- Define the result as a constant (Curro).

Signed-off-by: Samuel Iglesias Gons√°lvez <siglesias@igalia.com>
---
 src/mesa/drivers/dri/i965/brw_fs.cpp | 15 +--------------
 src/mesa/drivers/dri/i965/brw_fs.h   | 13 +++++++++++++
 2 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/src/mesa/drivers/dri/i965/brw_fs.cpp b/src/mesa/drivers/dri/i965/brw_fs.cpp
index 6aecdb77ee..62f5cd6827 100644
--- a/src/mesa/drivers/dri/i965/brw_fs.cpp
+++ b/src/mesa/drivers/dri/i965/brw_fs.cpp
@@ -340,19 +340,6 @@ fs_inst::has_source_and_destination_hazard() const
    }
 }
 
-unsigned
-fs_inst::exec_data_size() const
-{
-  unsigned exec_data_size = 0;
-
-  for (int i = 0; i < this->sources; i++) {
-    if (this->src[i].type != BAD_FILE)
-      exec_data_size = MAX2(exec_data_size, type_sz(this->src[i].type));
-  }
-
-  return exec_data_size;
-}
-
 bool
 fs_inst::is_copy_payload(const brw::simple_allocator &grf_alloc) const
 {
@@ -4577,7 +4564,7 @@ get_fpu_lowered_simd_width(const struct gen_device_info *devinfo,
        !inst->force_writemask_all) {
       const unsigned channels_per_grf = inst->exec_size /
          DIV_ROUND_UP(inst->size_written, REG_SIZE);
-      unsigned exec_type_size = inst->exec_data_size();
+      const unsigned exec_type_size = get_exec_type_size(inst);
       assert(exec_type_size);
 
       /* The hardware shifts exactly 8 channels per compressed half of the
diff --git a/src/mesa/drivers/dri/i965/brw_fs.h b/src/mesa/drivers/dri/i965/brw_fs.h
index d0e272bb9e..263db0b795 100644
--- a/src/mesa/drivers/dri/i965/brw_fs.h
+++ b/src/mesa/drivers/dri/i965/brw_fs.h
@@ -501,3 +501,16 @@ fs_reg setup_imm_df(const brw::fs_builder &bld,
 
 enum brw_barycentric_mode brw_barycentric_mode(enum glsl_interp_mode mode,
                                                nir_intrinsic_op op);
+
+static inline unsigned
+get_exec_type_size(const fs_inst *inst)
+{
+  unsigned exec_type_size = 0;
+
+  for (int i = 0; i < inst->sources; i++) {
+    if (inst->src[i].type != BAD_FILE)
+      exec_type_size = MAX2(exec_type_size, type_sz(inst->src[i].type));
+  }
+
+  return exec_type_size;
+}
-- 
2.11.0


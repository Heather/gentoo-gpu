From 0283408dfc53320f450097b3e73965cb70f4783d Mon Sep 17 00:00:00 2001
From: Steven Newbury <steve@snewbury.org.uk>
Date: Wed, 18 Jan 2017 23:35:23 +0000
Subject: [PATCH] Partial revert of "util: import sha1 implementation from
 OpenBSD"

Add back in the optional SHA1 implementations but fall back
to the internal version.

This partially reverts commit d1efa09d342bff3e5def2978a0bef748d74f9c82.
---
 configure.ac              | 130 +++++++++++++++++++++++-
 src/util/Makefile.am      |   3 +
 src/util/Makefile.sources |   9 +-
 src/util/mesa-sha1.c      | 244 ++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 382 insertions(+), 4 deletions(-)

diff --git a/configure.ac b/configure.ac
index de8af874ec..f0f1375292 100644
--- a/configure.ac
+++ b/configure.ac
@@ -9,6 +9,7 @@ dnl Copyright © 2009-2014 Jon TURNEY
 dnl Copyright © 2011-2012 Benjamin Franzke
 dnl Copyright © 2008-2014 David Airlie
 dnl Copyright © 2009-2013 Brian Paul
+dnl Copyright © 2003-2007 Keith Packard, Daniel Stone
 dnl
 dnl Permission is hereby granted, free of charge, to any person obtaining a
 dnl copy of this software and associated documentation files (the "Software"),
@@ -1436,6 +1437,134 @@ if test "x$enable_gallium_osmesa" = xyes; then
     fi
 fi
 
+# SHA1 hashing
+AC_ARG_WITH([sha1],
+        [AS_HELP_STRING([--with-sha1=libc|libmd|libnettle|libgcrypt|libcrypto|libsha1|CommonCrypto|CryptoAPI],
+        [choose SHA1 implementation])])
+case "x$with_sha1" in
+x | xlibc | xlibmd | xlibnettle | xlibgcrypt | xlibcrypto | xlibsha1 | xCommonCrypto | xCryptoAPI)
+  ;;
+*)
+        AC_MSG_ERROR([Illegal value for --with-sha1: $with_sha1])
+esac
+
+AC_CHECK_FUNC([SHA1Init], [HAVE_SHA1_IN_LIBC=yes])
+if test "x$with_sha1" = x && test "x$HAVE_SHA1_IN_LIBC" = xyes; then
+	with_sha1=libc
+fi
+if test "x$with_sha1" = xlibc && test "x$HAVE_SHA1_IN_LIBC" != xyes; then
+	AC_MSG_ERROR([sha1 in libc requested but not found])
+fi
+if test "x$with_sha1" = xlibc; then
+	AC_DEFINE([HAVE_SHA1_IN_LIBC], [1],
+		[Use libc SHA1 functions])
+	SHA1_LIBS=""
+fi
+AC_CHECK_FUNC([CC_SHA1_Init], [HAVE_SHA1_IN_COMMONCRYPTO=yes])
+if test "x$with_sha1" = x && test "x$HAVE_SHA1_IN_COMMONCRYPTO" = xyes; then
+	with_sha1=CommonCrypto
+fi
+if test "x$with_sha1" = xCommonCrypto && test "x$HAVE_SHA1_IN_COMMONCRYPTO" != xyes; then
+	AC_MSG_ERROR([CommonCrypto requested but not found])
+fi
+if test "x$with_sha1" = xCommonCrypto; then
+	AC_DEFINE([HAVE_SHA1_IN_COMMONCRYPTO], [1],
+		[Use CommonCrypto SHA1 functions])
+	SHA1_LIBS=""
+fi
+dnl stdcall functions cannot be tested with AC_CHECK_LIB
+AC_CHECK_HEADER([wincrypt.h], [HAVE_SHA1_IN_CRYPTOAPI=yes], [], [#include <windows.h>])
+if test "x$with_sha1" = x && test "x$HAVE_SHA1_IN_CRYPTOAPI" = xyes; then
+	with_sha1=CryptoAPI
+fi
+if test "x$with_sha1" = xCryptoAPI && test "x$HAVE_SHA1_IN_CRYPTOAPI" != xyes; then
+	AC_MSG_ERROR([CryptoAPI requested but not found])
+fi
+if test "x$with_sha1" = xCryptoAPI; then
+	AC_DEFINE([HAVE_SHA1_IN_CRYPTOAPI], [1],
+		[Use CryptoAPI SHA1 functions])
+	SHA1_LIBS=""
+fi
+AC_CHECK_LIB([md], [SHA1Init], [HAVE_LIBMD=yes])
+if test "x$with_sha1" = x && test "x$HAVE_LIBMD" = xyes; then
+	with_sha1=libmd
+fi
+if test "x$with_sha1" = xlibmd && test "x$HAVE_LIBMD" != xyes; then
+	AC_MSG_ERROR([libmd requested but not found])
+fi
+if test "x$with_sha1" = xlibmd; then
+	AC_DEFINE([HAVE_SHA1_IN_LIBMD], [1],
+	          [Use libmd SHA1 functions])
+	SHA1_LIBS=-lmd
+fi
+PKG_CHECK_MODULES([LIBSHA1], [libsha1], [HAVE_LIBSHA1=yes], [HAVE_LIBSHA1=no])
+if test "x$with_sha1" = x && test "x$HAVE_LIBSHA1" = xyes; then
+   with_sha1=libsha1
+fi
+if test "x$with_sha1" = xlibsha1 && test "x$HAVE_LIBSHA1" != xyes; then
+	AC_MSG_ERROR([libsha1 requested but not found])
+fi
+if test "x$with_sha1" = xlibsha1; then
+	AC_DEFINE([HAVE_SHA1_IN_LIBSHA1], [1],
+	          [Use libsha1 for SHA1])
+	SHA1_LIBS=-lsha1
+fi
+AC_CHECK_LIB([nettle], [nettle_sha1_init], [HAVE_LIBNETTLE=yes])
+if test "x$with_sha1" = x && test "x$HAVE_LIBNETTLE" = xyes; then
+	with_sha1=libnettle
+fi
+if test "x$with_sha1" = xlibnettle && test "x$HAVE_LIBNETTLE" != xyes; then
+	AC_MSG_ERROR([libnettle requested but not found])
+fi
+if test "x$with_sha1" = xlibnettle; then
+	AC_DEFINE([HAVE_SHA1_IN_LIBNETTLE], [1],
+	          [Use libnettle SHA1 functions])
+	SHA1_LIBS=-lnettle
+fi
+AC_CHECK_LIB([gcrypt], [gcry_md_open], [HAVE_LIBGCRYPT=yes])
+if test "x$with_sha1" = x && test "x$HAVE_LIBGCRYPT" = xyes; then
+	with_sha1=libgcrypt
+fi
+if test "x$with_sha1" = xlibgcrypt && test "x$HAVE_LIBGCRYPT" != xyes; then
+	AC_MSG_ERROR([libgcrypt requested but not found])
+fi
+if test "x$with_sha1" = xlibgcrypt; then
+	AC_DEFINE([HAVE_SHA1_IN_LIBGCRYPT], [1],
+	          [Use libgcrypt SHA1 functions])
+	SHA1_LIBS=-lgcrypt
+fi
+# We don't need all of the OpenSSL libraries, just libcrypto
+AC_CHECK_LIB([crypto], [SHA1_Init], [HAVE_LIBCRYPTO=yes])
+PKG_CHECK_MODULES([OPENSSL], [openssl], [HAVE_OPENSSL_PKC=yes],
+                  [HAVE_OPENSSL_PKC=no])
+if test "x$HAVE_LIBCRYPTO" = xyes || test "x$HAVE_OPENSSL_PKC" = xyes; then
+	if test "x$with_sha1" = x; then
+		with_sha1=libcrypto
+	fi
+else
+	if test "x$with_sha1" = xlibcrypto; then
+		AC_MSG_ERROR([OpenSSL libcrypto requested but not found])
+	fi
+fi
+if test "x$with_sha1" = xlibcrypto; then
+	if test "x$HAVE_LIBCRYPTO" = xyes; then
+		SHA1_LIBS=-lcrypto
+	else
+		SHA1_LIBS="$OPENSSL_LIBS"
+		SHA1_CFLAGS="$OPENSSL_CFLAGS"
+	fi
+fi
+AC_MSG_CHECKING([for external SHA1 implementation])
+AC_MSG_RESULT([$with_sha1])
+AM_CONDITIONAL([INTERNAL_SHA1], [test "x$with_sha1" = "x"])
+AC_SUBST(SHA1_LIBS)
+AC_SUBST(SHA1_CFLAGS)
+
+# Enable a define for SHA1
+if test "x$with_sha1" != "x"; then
+	DEFINES="$DEFINES -DHAVE_SHA1"
+fi
+
 if test "x$enable_dri" = xyes; then
     require_dri_shared_libs_and_glapi "DRI"
 
diff --git a/src/util/Makefile.am b/src/util/Makefile.am
index 32316b038f..093589163b 100644
--- a/src/util/Makefile.am
+++ b/src/util/Makefile.am
@@ -36,6 +36,7 @@ libmesautil_la_CPPFLAGS = \
 	-I$(top_srcdir)/src/mesa \
 	-I$(top_srcdir)/src/gallium/include \
 	-I$(top_srcdir)/src/gallium/auxiliary \
+	$(SHA1_CFLAGS) \
 	$(VISIBILITY_CFLAGS) \
 	$(MSVC2013_COMPAT_CFLAGS)
 
@@ -43,6 +44,8 @@ libmesautil_la_SOURCES = \
 	$(MESA_UTIL_FILES) \
 	$(MESA_UTIL_GENERATED_FILES)
 
+libmesautil_la_LIBADD = $(SHA1_LIBS)
+
 roundeven_test_LDADD = -lm
 
 check_PROGRAMS = u_atomic_test roundeven_test
diff --git a/src/util/Makefile.sources b/src/util/Makefile.sources
index a68a5fe22f..1a1581c841 100644
--- a/src/util/Makefile.sources
+++ b/src/util/Makefile.sources
@@ -19,8 +19,6 @@ MESA_UTIL_FILES :=	\
 	macros.h \
 	mesa-sha1.c \
 	mesa-sha1.h \
-	sha1/sha1.c \
-	sha1/sha1.h \
 	ralloc.c \
 	ralloc.h \
 	register_allocate.c \
@@ -46,5 +44,11 @@ MESA_UTIL_FILES :=	\
 	u_vector.h \
 	vk_alloc.h
 
+if INTERNAL_SHA1
+	MESA_UTIL_FILES +=	\
+		sha1/sha1.c \
+		sha1/sha1.h
+endif
+
 MESA_UTIL_GENERATED_FILES = \
 	format_srgb.c
diff --git a/src/util/mesa-sha1.c b/src/util/mesa-sha1.c
index e8f1bad22f..42ed4e6511 100644
--- a/src/util/mesa-sha1.c
+++ b/src/util/mesa-sha1.c
@@ -24,9 +24,19 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#ifndef HAVE_SHA1
 #include "sha1/sha1.h"
+#endif
+
 #include "mesa-sha1.h"
 
+#ifdef HAVE_SHA1
+
+#if defined(HAVE_SHA1_IN_LIBMD)  /* Use libmd for SHA1 */ \
+	|| defined(HAVE_SHA1_IN_LIBC)   /* Use libc for SHA1 */
+
+#include <sha1.h>
+
 struct mesa_sha1 *
 _mesa_sha1_init(void)
 {
@@ -58,6 +68,238 @@ _mesa_sha1_final(struct mesa_sha1 *ctx, unsigned char result[20])
    return 1;
 }
 
+#elif defined(HAVE_SHA1_IN_COMMONCRYPTO)        /* Use CommonCrypto for SHA1 */
+
+#include <CommonCrypto/CommonDigest.h>
+
+struct mesa_sha1 *
+_mesa_sha1_init(void)
+{
+   CC_SHA1_CTX *ctx = malloc(sizeof(*ctx));
+
+   if (!ctx)
+      return NULL;
+
+   CC_SHA1_Init(ctx);
+   return (struct mesa_sha1 *) ctx;
+}
+
+int
+_mesa_sha1_update(struct mesa_sha1 *ctx, const void *data, int size)
+{
+   CC_SHA1_CTX *sha1_ctx = (CC_SHA1_CTX *) ctx;
+
+   CC_SHA1_Update(sha1_ctx, data, size);
+   return 1;
+}
+
+int
+_mesa_sha1_final(struct mesa_sha1 *ctx, unsigned char result[20])
+{
+   CC_SHA1_CTX *sha1_ctx = (CC_SHA1_CTX *) ctx;
+
+   CC_SHA1_Final(result, sha1_ctx);
+   free(sha1_ctx);
+   return 1;
+}
+
+#elif defined(HAVE_SHA1_IN_CRYPTOAPI)        /* Use CryptoAPI for SHA1 */
+
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#include <wincrypt.h>
+
+static HCRYPTPROV hProv;
+
+struct mesa_sha1 *
+_mesa_sha1_init(void)
+{
+   HCRYPTHASH *ctx = malloc(sizeof(*ctx));
+
+   if (!ctx)
+      return NULL;
+
+   CryptAcquireContext(&hProv, NULL, MS_DEF_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
+   CryptCreateHash(hProv, CALG_SHA1, 0, 0, ctx);
+   return (struct mesa_sha1 *) ctx;
+}
+
+int
+_mesa_sha1_update(struct mesa_sha1 *ctx, const void *data, int size)
+{
+   HCRYPTHASH *hHash = (HCRYPTHASH *) ctx;
+
+   CryptHashData(*hHash, data, size, 0);
+   return 1;
+}
+
+int
+_mesa_sha1_final(struct mesa_sha1 *ctx, unsigned char result[20])
+{
+   HCRYPTHASH *hHash = (HCRYPTHASH *) ctx;
+   DWORD len = 20;
+
+   CryptGetHashParam(*hHash, HP_HASHVAL, result, &len, 0);
+   CryptDestroyHash(*hHash);
+   CryptReleaseContext(hProv, 0);
+   free(ctx);
+   return 1;
+}
+
+#elif defined(HAVE_SHA1_IN_LIBNETTLE)   /* Use libnettle for SHA1 */
+
+#include <nettle/sha.h>
+
+struct mesa_sha1 *
+_mesa_sha1_init(void)
+{
+   struct sha1_ctx *ctx = malloc(sizeof(*ctx));
+
+   if (!ctx)
+      return NULL;
+   sha1_init(ctx);
+   return (struct mesa_sha1 *) ctx;
+}
+
+int
+_mesa_sha1_update(struct mesa_sha1 *ctx, const void *data, int size)
+{
+   sha1_update((struct sha1_ctx *) ctx, size, data);
+   return 1;
+}
+
+int
+_mesa_sha1_final(struct mesa_sha1 *ctx, unsigned char result[20])
+{
+   sha1_digest((struct sha1_ctx *) ctx, 20, result);
+   free(ctx);
+   return 1;
+}
+
+#elif defined(HAVE_SHA1_IN_LIBGCRYPT)   /* Use libgcrypt for SHA1 */
+
+#include <gcrypt.h>
+#include "c11/threads.h"
+
+static void _mesa_libgcrypt_init(void)
+{
+   if (!gcry_check_version(NULL))
+      return;
+
+   gcry_control(GCRYCTL_DISABLE_SECMEM, 0);
+   gcry_control(GCRYCTL_INITIALIZATION_FINISHED, 0);
+}
+
+struct mesa_sha1 *
+_mesa_sha1_init(void)
+{
+   static once_flag flag = ONCE_FLAG_INIT;
+   gcry_md_hd_t h;
+   gcry_error_t err;
+
+   call_once(&flag, _mesa_libgcrypt_init);
+
+   err = gcry_md_open(&h, GCRY_MD_SHA1, 0);
+   if (err)
+      return NULL;
+   return (struct mesa_sha1 *) h;
+}
+
+int
+_mesa_sha1_update(struct mesa_sha1 *ctx, const void *data, int size)
+{
+   gcry_md_hd_t h = (gcry_md_hd_t) ctx;
+
+   gcry_md_write(h, data, size);
+   return 1;
+}
+
+int
+_mesa_sha1_final(struct mesa_sha1 *ctx, unsigned char result[20])
+{
+   gcry_md_hd_t h = (gcry_md_hd_t) ctx;
+
+   memcpy(result, gcry_md_read(h, GCRY_MD_SHA1), 20);
+   gcry_md_close(h);
+   return 1;
+}
+
+#elif defined(HAVE_SHA1_IN_LIBSHA1)     /* Use libsha1 */
+
+#include <libsha1.h>
+
+struct mesa_sha1 *
+_mesa_sha1_init(void)
+{
+   sha1_ctx *ctx = malloc(sizeof(*ctx));
+
+   if (!ctx)
+      return NULL;
+   sha1_begin(ctx);
+   return (struct mesa_sha1 *) ctx;
+}
+
+int
+_mesa_sha1_update(struct mesa_sha1 *ctx, const void *data, int size)
+{
+   sha1_hash(data, size, (sha1_ctx *) ctx);
+   return 1;
+}
+
+int
+_mesa_sha1_final(struct mesa_sha1 *ctx, unsigned char result[20])
+{
+   sha1_end(result, (sha1_ctx *) ctx);
+   free(ctx);
+   return 1;
+}
+
+#else                           /* Use OpenSSL's libcrypto */
+
+#include <stddef.h>             /* buggy openssl/sha.h wants size_t */
+#include <openssl/sha.h>
+
+struct mesa_sha1 *
+_mesa_sha1_init(void)
+{
+   int ret;
+   SHA_CTX *ctx = malloc(sizeof(*ctx));
+
+   if (!ctx)
+      return NULL;
+   ret = SHA1_Init(ctx);
+   if (!ret) {
+      free(ctx);
+      return NULL;
+   }
+   return (struct mesa_sha1 *) ctx;
+}
+
+int
+_mesa_sha1_update(struct mesa_sha1 *ctx, const void *data, int size)
+{
+   int ret;
+   SHA_CTX *sha_ctx = (SHA_CTX *) ctx;
+
+   ret = SHA1_Update(sha_ctx, data, size);
+   if (!ret)
+      free(sha_ctx);
+   return ret;
+}
+
+int
+_mesa_sha1_final(struct mesa_sha1 *ctx, unsigned char result[20])
+{
+   int ret;
+   SHA_CTX *sha_ctx = (SHA_CTX *) ctx;
+
+   ret = SHA1_Final(result, (SHA_CTX *) sha_ctx);
+   free(sha_ctx);
+   return ret;
+}
+
+#endif
+
 void
 _mesa_sha1_compute(const void *data, size_t size, unsigned char result[20])
 {
@@ -82,3 +324,5 @@ _mesa_sha1_format(char *buf, const unsigned char *sha1)
 
    return buf;
 }
+
+#endif
-- 
2.11.0

